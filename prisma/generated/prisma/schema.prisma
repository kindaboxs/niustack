// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  isAnonymous     Boolean?
  username        String?
  displayUsername String?
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  sessions        Session[]
  accounts        Account[]
  members         Member[]
  invitations     Invitation[]

  posts          Post[]          @relation(name: "PostAuthor")
  comments       Comment[]       @relation(name: "CommentAuthor")
  postUpvotes    PostUpvote[]    @relation(name: "PostUpvoteUser")
  commentUpvotes CommentUpvote[] @relation(name: "CommentUpvoteUser")

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Post {
  id           Int     @id @default(autoincrement())
  userId       String
  title        String
  url          String?
  content      String?
  points       Int     @default(0)
  commentCount Int     @default(0)

  author      User         @relation(name: "PostAuthor", fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]    @relation(name: "CommentPost")
  postUpvotes PostUpvote[] @relation(name: "PostUpvotePost")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("post")
}

model Comment {
  id              Int    @id @default(autoincrement())
  userId          String
  postId          Int
  parentCommentId Int?
  content         String
  points          Int    @default(0)
  commentCount    Int    @default(0)
  depth           Int    @default(0)

  author         User            @relation(name: "CommentAuthor", fields: [userId], references: [id], onDelete: Cascade)
  post           Post            @relation(name: "CommentPost", fields: [postId], references: [id], onDelete: Cascade)
  parentComment  Comment?        @relation(name: "CommentParent", fields: [parentCommentId], references: [id], onDelete: SetNull)
  childComments  Comment[]       @relation(name: "CommentParent")
  commentUpvotes CommentUpvote[] @relation(name: "CommentUpvoteComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model PostUpvote {
  id     Int    @id @default(autoincrement())
  userId String
  postId Int

  user User @relation(name: "PostUpvoteUser", fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(name: "PostUpvotePost", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_upvote")
}

model CommentUpvote {
  id        Int    @id @default(autoincrement())
  userId    String
  commentId Int

  user    User    @relation(name: "CommentUpvoteUser", fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(name: "CommentUpvoteComment", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_upvote")
}
